{"version":3,"sources":["js/FileSystem.js","js/Canvas.js","js/Chat.js","js/Hunger.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["FilesystemBtn","selectFile","a","window","showOpenFilePicker","fileHandle","idbKeyval","set","readFile","getFile","file","className","onClick","readIMG","get","URL","webkitURL","imgURL","createObjectURL","dbPromise","openDB","upgrade","db","createObjectStore","key","val","put","delete","clear","keys","getAllKeys","ImageBG","props","useState","url","setUrl","useImage","image","handleFileChange","useEffect","width","w","height","h","Character","x","y","Canvas","Chats","chat","chatBottom","useRef","displayOption","setDisplayOption","current","scrollIntoView","block","prev","map","item","mesage","option","response","ref","Textbox","send","question","setQuestion","setOption","handleSend","onKeyUp","event","keyCode","type","placeholder","onChange","target","value","Chat","localStorage","getItem","JSON","parse","setChat","setItem","stringify","processOption","split","m","o","length","Math","floor","random","Hunger","hungryMax","healthMax","rederingSpeed","prevHungryCount","isNaN","Number","hungryTimestamp","count","Date","now","hungryCount","setHungryCount","displayHungry","round","updateHungry","i","prevHealthCount","healthTimestamp","healthCount","setHealthCount","displayHealth","updateHealth","interval","setInterval","clearInterval","repeat","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","process","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.e988991b.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { openDB } from 'idb';\n\nconst FilesystemBtn = ()=>{\n    const selectFile = async ()=>{\n        let [fileHandle] = await window.showOpenFilePicker();\n        idbKeyval.set(fileHandle,\"BG fileHandle\");\n        readFile(fileHandle);\n    }\n    const readFile = async (fileHandle)=>{\n        const file = await fileHandle.getFile();\n        idbKeyval.set(file,\"BG image\");\n    }\n\n    return(\n        <div>\n        <button\n        className='add-button'\n        onClick={selectFile}>\n            BG iamge\n        </button>\n        </div>\n    )\n}\n\n\nconst readFile = async ()=>{\n    const fileHandle = await idbKeyval.get(\"BG fileHandle\");\n    const file = await fileHandle.getFile();\n    const URL = window.URL || window.webkitURL;\n    const imgURL = URL.createObjectURL(file);\n    return imgURL;\n}\n\nconst readIMG = async ()=>{\n    let imgURL;\n    try {\n        const file = await idbKeyval.get(\"BG image\");\n        const URL = window.URL || window.webkitURL;\n        imgURL = URL.createObjectURL(file);        \n    } catch (error) {\n        // imgURL='familiar-pwa2/img/bg.jpg';\n        imgURL='./img/bg.jpg';\n    }\n    return imgURL;\n}\n\nconst dbPromise = openDB('keyval-store', 1, {\n    upgrade(db) {\n      db.createObjectStore('keyval');\n    },\n  });\n  \nconst idbKeyval = {\n    async get(key) {\n        return (await dbPromise).get('keyval', key);\n    },\n    async set(val,key) {\n        return (await dbPromise).put('keyval', val, key);\n    },\n    async delete(key) {\n        return (await dbPromise).delete('keyval', key);\n    },\n    async clear() {\n        return (await dbPromise).clear('keyval');\n    },\n    async keys() {\n        return (await dbPromise).getAllKeys('keyval');\n    },\n};\n\nexport {readFile, FilesystemBtn, readIMG, idbKeyval};","import useImage from 'use-image';\nimport { Stage, Layer, Image } from 'react-konva';\nimport { useEffect, useState } from 'react';\nimport {readIMG} from './FileSystem';\n\nconst ImageBG = (props) => {\n  // const [image] = useImage('./img/bg.jpg');\n  const [url, setUrl] =useState();\n  const [image] = useImage(url);\n  const handleFileChange = async()=>{\n    let file = await readIMG();\n    setUrl(file);\n  }\n  useEffect(()=>{\n    handleFileChange(); \n  },[])\n  return <Image \n      width={props.w}\n      height={props.h}\n      image={image}\n      onClick={handleFileChange}\n      />;\n  };\n  \n  const Character = () => {\n    const [image] = useImage('./img/walking_01.png');\n    //const [image] = useImage('familiar-pwa2/img/walking_01.png');\n    return <Image \n    width={500}\n    height={500}\n    x = {390}\n    y = {130}\n    image={image} />;\n  };\n  \n  const Canvas = (props)=>{\n    return(\n    <Stage\n    className = 'stage'\n    width={props.w}\n    height={props.h}\n    >\n    <Layer>\n    <ImageBG\n    w={props.w}\n    h={props.h}/>\n    <Character/>\n    </Layer>\n  </Stage>);\n  }\n  \nexport default Canvas;","import {useEffect, useRef, useState } from 'react';\n\nconst Chats =({chat})=>{\n  const chatBottom = useRef(null);\n  const [displayOption, setDisplayOption] = useState(false);\n  const handdleDisplayOption = () =>{\n    setDisplayOption(prev=>!prev)\n  }\n  useEffect(()=>{\n    chatBottom.current.scrollIntoView({block: \"end\"});\n  },[chat])\n\n  return(\n    <div className='chats' onClick={handdleDisplayOption}>\n      {chat.map(item => <div className='chat' key={item.key}><strong>\n        あなた: </strong>{item.mesage}<br/>\n        {displayOption?' ('+item.option+')':item.option[item.response]}</div>)}\n      <div ref={chatBottom}></div>\n    </div>\n  );\n}\n\n\nconst Textbox=({send})=>{\n  const [question, setQuestion] = useState('');\n  const [option, setOption] = useState('');\n  const changeQuestion = event => setQuestion(event.target.value);\n  const changeOption = event => setOption(event.target.value);\n\n  const handleSend = ()=>{\n    send(question,option);\n    setQuestion('');\n  }\n\n  const onKeyUp = event =>{\n    if (event.keyCode === 13) {\n      handleSend();\n    }\n  }\n  \n  return(\n    <div className='chatInputContainer' onKeyUp={onKeyUp}>\n      <input type='text' \n      className = 'chatInput'\n      placeholder='質問' \n      onChange={changeQuestion} \n      value={question}></input>\n\n      <input type='text' \n      className = 'chatInput'\n      placeholder='はい/いええ' \n      onChange={changeOption} \n      value={option}></input>\n\n      <button\n      className = 'chatBtn'\n      onClick = {handleSend}\n      >確認</button>\n    </div>\n  );\n}\n\n\nconst Chat = ()=>{\n  const [chat, setChat] = useState(()=>{\n      let prev = localStorage.getItem(\"chat\");\n      return prev===null?[]:JSON.parse(prev);\n    });\n  const reset = ()=>setChat([]);\n  const send = (question,option) =>{\n      const request = (m,o) => {\n          return {key: chat.length, mesage: m,option: o, response: Math.floor(Math.random()*o.length)};\n      };\n      if(question!=='' | option!==''){\n        const patt = /[\\s,]/\n        let processOption = option.split(patt);\n        processOption = processOption === null?[]:processOption; \n        setChat(prev=> [...prev, request(question,processOption)])  \n    }\n  }\n  useEffect(()=>{\n      localStorage.setItem('chat',JSON.stringify(chat));\n  },[chat])\n\n  return (\n    <div className='chatBox text'>\n      <strong>ペットに聞く:</strong>\n      <button\n        className = 'chatBtn'\n        onClick = {reset}\n        >リセット</button>\n      <Chats chat={chat}/>\n      <Textbox send={send}/>\n    </div>\n  );\n}\n\nexport default Chat;","import {useEffect, useState} from 'react';\n\nconst Hunger = ()=>{\n    //handle hunger count\n    const hungryMax = 10*60*60*1000;\n    const healthMax = 10*60*60*1000;\n    const rederingSpeed = 60*1000;\n  \n    //handle hunger\n    const  [hungryCount, setHungryCount] = useState(()=>{\n      let prevHungryCount = localStorage.getItem(\"hungryCount\");\n      if (prevHungryCount===null | isNaN(Number(prevHungryCount))){\n        return hungryMax;\n      }else{\n        const hungryTimestamp = localStorage.getItem(\"hungryTimestamp\");\n        let count = prevHungryCount - (Date.now() - hungryTimestamp);\n        return count>=hungryMax?hungryMax:count<0?0: count;      \n      }\n    });\n    const displayHungry =()=> Math.round(hungryCount*5/hungryMax);\n    const updateHungry = (i)=>{\n      //feed the familiar\n      setHungryCount(prev=>{\n        let count = prev + i;\n        return count>=hungryMax?hungryMax:count<0?0: count;\n      });\n    }\n    const handleClickHungry =()=>{\n      updateHungry(60*60*1000);\n    }\n    useEffect(()=>{\n      localStorage.setItem('hungryCount',hungryCount)\n      localStorage.setItem('hungryTimestamp',Date.now());\n    },[hungryCount]);\n  \n  \n    //handle health\n    const  [healthCount, setHealthCount] = useState(()=>{\n      let prevHealthCount = localStorage.getItem(\"healthCount\");\n      if (prevHealthCount===null | isNaN(Number(prevHealthCount))){\n        return healthMax;\n      }else if (hungryCount>0){\n        return prevHealthCount;\n      }else{\n      prevHealthCount = Number(prevHealthCount)\n      const healthTimestamp = localStorage.getItem(\"healthTimestamp\");\n      const prevHungryCount = localStorage.getItem(\"hungryCount\");\n      const hungryTimestamp = localStorage.getItem(\"hungryTimestamp\");\n  \n      let newHungryCount = prevHungryCount - (Date.now() - hungryTimestamp);\n      let count = (prevHealthCount + newHungryCount) - (Date.now() - healthTimestamp)\n      return count>=healthMax?healthMax:count<0?0: count;\n      }\n    });\n    const displayHealth =()=> Math.floor(healthCount*5/healthMax);\n    const updateHealth = (i)=>{\n      setHealthCount(prev=>{\n        let count = prev + i;\n        return count>=healthMax?healthMax:count<0?0: count;\n      });\n    }\n    const handleClickHealth =()=>{\n      updateHealth(60*60*1000);\n    }\n    useEffect(()=>{\n      localStorage.setItem('healthCount',healthCount)\n      localStorage.setItem('healthTimestamp',Date.now());\n    },[healthCount]);\n  \n    useEffect(()=>{\n      //update hungry count evry x seconds\n      if (hungryCount>0) {\n        const interval = setInterval (()=>{\n          updateHungry(-rederingSpeed);\n        }\n          , rederingSpeed);\n        return(()=>clearInterval(interval))\n      }else if (healthCount>0){\n        const interval = setInterval (()=>{\n          updateHealth(-rederingSpeed);\n        }\n          , rederingSpeed);\n        return(()=>clearInterval(interval))\n      }\n    });\n  \n    return(\n      <div className='text feed'>\n      <strong>満腹度:</strong> {'🍖'.repeat(displayHungry())} {displayHungry()===0 &&'（空腹！😨）'}\n      <br/>\n      <strong>健康度:</strong> {'❤ '.repeat(displayHealth())} {displayHealth()===0 &&'（瀕死！💀）'}\n      <br/>\n      <button \n      type='button'\n      onClick={handleClickHungry}\n      >食事</button>\n  \n  <button \n      type='button'\n      onClick={handleClickHealth}\n      >治療</button>\n      </div>\n    );\n  }\n  \nexport default Hunger;","import './App.css';\n// import {useEffect, useState} from 'react';\nimport Canvas from './js/Canvas';\nimport Chat from './js/Chat';\nimport Hunger from './js/Hunger';\nimport A2HS from './js/A2HS';\nimport {FilesystemBtn} from './js/FileSystem';\n\n\nfunction App() {\n  const width = 1280;\n  const height = 720;\n  return (\n    <div className = 'container'>\n      <div\n      className = 'sub-container'\n      width={width}\n      height={height}>\n        <Canvas w={width} h={height}/>\n        <Hunger/>\n        <Chat/>\n        <FilesystemBtn/>\n        {/* <A2HS/> */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  \n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}