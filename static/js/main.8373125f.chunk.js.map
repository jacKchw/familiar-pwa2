{"version":3,"sources":["js/Canvas.js","js/Chat.js","js/Hunger.js","js/A2HS.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["ImageBG","props","useImage","image","width","w","height","h","Character","x","y","Canvas","className","Chat","chatBottom","useRef","useState","question","setQuestion","option","setOption","chat","setChat","send","processOption","match","prev","m","o","key","length","mesage","response","Math","floor","random","onKeyUp","event","keyCode","useEffect","current","scrollIntoView","block","map","item","ref","type","placeholder","onChange","target","value","onClick","Hunger","hungryMax","healthMax","rederingSpeed","prevHungryCount","localStorage","getItem","isNaN","Number","hungryTimestamp","count","Date","now","hungryCount","setHungryCount","displayHungry","round","updateHungry","i","setItem","prevHealthCount","healthTimestamp","healthCount","setHealthCount","displayHealth","updateHealth","interval","setInterval","clearInterval","repeat","useEvent","handler","passive","window","addEventListener","removeEventListener","A2HS","deferredPrompt","display","setDisplay","e","preventDefault","style","prompt","userChoice","then","choiceResult","outcome","console","log","App","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.8373125f.chunk.js","sourcesContent":["import useImage from 'use-image';\nimport { Stage, Layer, Image } from 'react-konva';\n\nconst ImageBG = (props) => {\n    const [image] = useImage('./img/bg.jpg');\n    return <Image \n    width={props.w}\n    height={props.h}\n    image={image} />;\n  };\n  \n  const Character = () => {\n    const [image] = useImage('./img/walking_01.png');\n    return <Image \n    width={500}\n    height={500}\n    x = {390}\n    y = {130}\n    image={image} />;\n  };\n  \n  const Canvas = (props)=>{\n    return(\n    <Stage\n    className = 'stage'\n    width={props.w}\n    height={props.h}\n    >\n    <Layer>\n    <ImageBG\n    w={props.w}\n    h={props.h}/>\n    <Character/>\n    </Layer>\n  </Stage>);\n  }\n  \nexport default Canvas;","import {useEffect, useRef, useState } from 'react';\n\nconst Chat = ()=>{\n    const chatBottom = useRef(null);\n    const [question, setQuestion] = useState('');\n    const [option, setOption] = useState('');\n    const [chat, setChat] = useState([]);\n\n    const changeQuestion = event => {\n      setQuestion(event.target.value);\n    };\n  \n    const changeOption = event => {\n      setOption(event.target.value);\n    };\n  \n    const send = () =>{\n        const request = (m,o) => {\n            return {key: chat.length, mesage: m,option: o, response: Math.floor(Math.random()*o.length)};\n        };\n\n        if(question!=='' | option!==''){\n          const patt = /\\S+/g;\n          let processOption = option.match(patt);\n          processOption = processOption === null?[]:processOption; \n          setChat(prev=> [...prev, request(question,processOption)])  \n          setQuestion('');\n      }\n    }\n\n    const onKeyUp = event =>{\n        if (event.keyCode === 13) {\n            send();\n        }\n    }\n\n    useEffect(()=>{\n        chatBottom.current.scrollIntoView({block: \"end\"});\n    },[chat])\n\n    return (\n      <div \n      className='chatBox text'>\n        <strong>ペットに聞く:</strong>\n        <div className='chats'>\n          {chat.map(item => <div className='chat' key={item.key}><strong>あなた: </strong>{item.mesage}<br/>{item.option[item.response]}</div>)}\n        <div ref={chatBottom}></div>\n        </div>\n        <div className='chatInputContainer'>\n\n          <input type='text' \n          className = 'chatInput'\n          placeholder='質問' \n          onChange={changeQuestion} \n          onKeyUp={onKeyUp}\n          value={question}></input>\n\n          <input type='text' \n          className = 'chatInput'\n          placeholder='はい/いええ' \n          onChange={changeOption} \n          onKeyUp={onKeyUp}\n          value={option}></input>\n\n          <button\n          className = 'chatBtn'\n          onClick = {send}\n          >確認</button>\n        </div>\n      </div>\n    )\n  }\n\nexport default Chat;","import {useEffect, useState} from 'react';\n\nconst Hunger = ()=>{\n    //handle hunger count\n    const hungryMax = 10*60*60*1000;\n    const healthMax = 10*60*60*1000;\n    const rederingSpeed = 60*1000;\n  \n    //handle hunger\n    const  [hungryCount, setHungryCount] = useState(()=>{\n      let prevHungryCount = localStorage.getItem(\"hungryCount\");\n      if (prevHungryCount===null | isNaN(Number(prevHungryCount))){\n        return hungryMax;\n      }else{\n        const hungryTimestamp = localStorage.getItem(\"hungryTimestamp\");\n        let count = prevHungryCount - (Date.now() - hungryTimestamp);\n        return count>=hungryMax?hungryMax:count<0?0: count;      \n      }\n    });\n    const displayHungry =()=> Math.round(hungryCount*5/hungryMax);\n    const updateHungry = (i)=>{\n      //feed the familiar\n      setHungryCount(prev=>{\n        let count = prev + i;\n        return count>=hungryMax?hungryMax:count<0?0: count;\n      });\n    }\n    const handleClickHungry =()=>{\n      updateHungry(60*60*1000);\n    }\n    useEffect(()=>{\n      localStorage.setItem('hungryCount',hungryCount)\n      localStorage.setItem('hungryTimestamp',Date.now());\n    },[hungryCount]);\n  \n  \n    //handle health\n    const  [healthCount, setHealthCount] = useState(()=>{\n      let prevHealthCount = localStorage.getItem(\"healthCount\");\n      if (prevHealthCount===null | isNaN(Number(prevHealthCount))){\n        return healthMax;\n      }else if (hungryCount>0){\n        return prevHealthCount;\n      }else{\n      prevHealthCount = Number(prevHealthCount)\n      const healthTimestamp = localStorage.getItem(\"healthTimestamp\");\n      const prevHungryCount = localStorage.getItem(\"hungryCount\");\n      const hungryTimestamp = localStorage.getItem(\"hungryTimestamp\");\n  \n      let newHungryCount = prevHungryCount - (Date.now() - hungryTimestamp);\n      let count = (prevHealthCount + newHungryCount) - (Date.now() - healthTimestamp)\n      return count>=healthMax?healthMax:count<0?0: count;\n      }\n    });\n    const displayHealth =()=> Math.floor(healthCount*5/healthMax);\n    const updateHealth = (i)=>{\n      setHealthCount(prev=>{\n        let count = prev + i;\n        return count>=healthMax?healthMax:count<0?0: count;\n      });\n    }\n    const handleClickHealth =()=>{\n      updateHealth(60*60*1000);\n    }\n    useEffect(()=>{\n      localStorage.setItem('healthCount',healthCount)\n      localStorage.setItem('healthTimestamp',Date.now());\n    },[healthCount]);\n  \n    useEffect(()=>{\n      //update hungry count evry x seconds\n      if (hungryCount>0) {\n        const interval = setInterval (()=>{\n          updateHungry(-rederingSpeed);\n        }\n          , rederingSpeed);\n        return(()=>clearInterval(interval))\n      }else if (healthCount>0){\n        const interval = setInterval (()=>{\n          updateHealth(-rederingSpeed);\n        }\n          , rederingSpeed);\n        return(()=>clearInterval(interval))\n      }\n    });\n  \n    return(\n      <div className='text feed'>\n      <strong>満腹度:</strong> {'🍖'.repeat(displayHungry())} {displayHungry()===0 &&'（空腹！😨）'}\n      <br/>\n      <strong>健康度:</strong> {'❤ '.repeat(displayHealth())} {displayHealth()===0 &&'（瀕死！💀）'}\n      <br/>\n      <button \n      type='button'\n      onClick={handleClickHungry}\n      >食事</button>\n  \n  <button \n      type='button'\n      onClick={handleClickHealth}\n      >治療</button>\n      </div>\n    );\n  }\n  \nexport default Hunger;","import {useEffect, useState} from 'react';\n\nconst A2HS = ()=>{\n    const [display, setDisplay] = useState('none');\n    let deferredPrompt;\n    useEvent('beforeinstallprompt', (e)=>{\n        e.preventDefault();\n        deferredPrompt = e;\n        setDisplay('block');\n    })\n    const handleOnClick = ()=>{\n        if(display==='block'){\n            // hide our user interface that shows our A2HS button\n            setDisplay('none');\n            // Show the prompt\n            deferredPrompt.prompt();\n            // Wait for the user to respond to the prompt\n            deferredPrompt.userChoice.then((choiceResult) => {\n                if (choiceResult.outcome === 'accepted') {\n                  console.log('User accepted the A2HS prompt');\n                } else {\n                  console.log('User dismissed the A2HS prompt');\n                }\n                deferredPrompt = null;\n              });\n\n        }\n    }\n    return (\n        <button\n        className='add-button'\n        style={{display}}\n        onClick={handleOnClick}\n        >Add to home screen</button>\n    )\n}\n\nconst useEvent=(event, handler, passive = false)=> {\n    useEffect(() => {\n      // initiate the event handler\n      window.addEventListener(event, handler, passive)\n  \n      // this will clean up the event every time the component is re-rendered\n      return function cleanup() {\n        window.removeEventListener(event, handler)\n      }\n    })\n  }\n\nexport default A2HS;","import './App.css';\n// import {useEffect, useState} from 'react';\nimport Canvas from './js/Canvas';\nimport Chat from './js/Chat';\nimport Hunger from './js/Hunger';\nimport A2HS from './js/A2HS';\n\nfunction App() {\n  const width = 1280;\n  const height = 720;\n  return (\n    <div className = 'container'>\n      <div\n      className = 'sub-container'\n      width={width}\n      height={height}>\n        <Canvas w={width} h={height}/>\n        <Hunger/>\n        <Chat/>\n        <A2HS/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  \n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      console.log('isLocalhost');\n\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        console.log('isLocalhost');\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}